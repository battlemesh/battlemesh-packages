#!/usr/bin/lua

local crc = require "crc16"
local uci = require "uci"
local argv = arg
local x = uci.cursor()

-- test suite utilities

local function sprintf(...)
	return string.format(...)
end

local function printf(...)
	print(sprintf(...))
end

function string:split(sep)
   --Adding functionality to lua's string function to handle spliting CSV's
   local sep, fields = sep or ":", {}
   local pattern = string.format("([^%s]+)", sep)
   self:gsub(pattern, function(c) fields[#fields+1] = c end)
   return fields
end

-- Testing Functions

local function neigh_batadv()
	local c = io.popen("batctl o")
	local s = assert(x:get("wbm", "wireless", "ssid"))

	c:read("*l")
	c:read("*l")

	local l
	while true do
		l = c:read("*l")
		if not l then
			break
		end

		local q, a, i = l:match("^%S+ +%S+ +%((%d+)%) +(%S+) +%[ -(%S+)%]")
		if not (q and a and i) then
			break
		end

		local id = crc.hash(a)
		return sprintf("%17s	%6.2f%%	%8s	%s-%04x",
			a, q / 255 * 100, i, s, id)
	end
end

local function neigh_olsr()
   --Uses txtinfo plugin to gather olsr neighborhood. Gathers both ipv6 and ipv4 addresses and appends them to the neighborhood list.
   local rawdata = luci.sys.httpget("http://127.0.0.1:2006/neighbors")
   local tables = luci.util.split(luci.util.trim(rawdata), nil, nil, nil)
   neighborhood = {}
   for i,x in ipairs(tables) do
	  b,c = string.find(x, "^%d+%.%d+%.%d+%.%d+")
	  d,e = string.find(x, "^%x+%:%x+%:%x+%:%x+%:%x+%:%x+%:%x+%:%x+")
	  if b then
		 table.insert(neighborhood, string.sub(x,b,c))
	  elseif d then
		 table.insert(neighborhood, string.sub(x,d,e))
	  end
   end
   return neighborhood
end

local function net_perf(ipaddr)
   -- Runs an netperf client aimed at the supplied IP address and returns the raw throughput @ kilobits per second
   local throughput = io.popen("netperf -v 0 -f k -H "..ipaddr)
   tp = throughput:read("*a")
   raw = tp:match("^MIGRATED.*demo\n(.*)%s\n")

   if tp:match("%d+%.%d+") then
	  return ("netPerf to " .. ipaddr .. " measured at " .. raw .. "k")
   else
	  return ("NetPerf Error: " .. tp)
   end
end

local function restart_node(delay)
   --sleeps the node for <delay> number of seconds and then reboots node. This function will be useful for creating a flapping node. Restarting the node seems to be the method for flappign a node that causes the least possibility of node level changes that could taint test results.
   print("sleeping for "..delay.." seconds")
   os.execute("sleep "..delay)
   os.execute("reboot")
end

local function append_log(data)
   -- Simple log appender
   testLog = io.open("/tmp/wbm06Test.log", "a")
   testLog:write(data)
   testLog:close()
end

-- test suite arguments

local function throughput_test(ipaddr)
   if ipaddr then
	  print(net_perf(ipaddr))
   else
	  print("Please supply an ip address")
   end
end

local function list_neighbours(proto)
   if proto == "batadv" then
	  print(neigh_batadv())
   elseif proto == "olsr" then
		 print(neigh_olsr())
   end
end

local function main()
   if argv[1] == "list" then
	  if argv[2] == "neighbours" then list_neighbours(argv[3]) end
   elseif argv[1] == "throughput" then throughput_test(argv[2])
   elseif argv[1] == "restart" then restart_node(argv[2])
   end
end

main()

